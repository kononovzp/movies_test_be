version: 0.2

phases:
  pre_build:
    commands:
      - set -e
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $IMAGE_REPO_NAME:$CODEBUILD_BUILD_NUMBER -t $IMAGE_REPO_NAME:latest .
      - docker tag $IMAGE_REPO_NAME:$CODEBUILD_BUILD_NUMBER $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$CODEBUILD_BUILD_NUMBER
      - docker tag $IMAGE_REPO_NAME:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$CODEBUILD_BUILD_NUMBER
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest

  post_build:
    commands:
      - echo "Deploying to EC2 via SSH"

      # Create SSH key file for SSH access to EC2
      - echo "$PRIVATE_KEY" > private_key.pem
      - chmod 600 private_key.pem

      # SSH into the EC2 instance and run commands one by one
      - |
        ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USERNAME@$EC2_HOST " \
          echo 'Logging into ECR...'; \
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID; \
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY; \
          aws configure set region $AWS_DEFAULT_REGION; \
          aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY; \
          echo 'Stopping existing containers...'; \
          docker stop backend redis traefik || true; \
          docker rm backend redis traefik || true; \
          echo 'Removing old images...'; \
          docker rmi $(docker images $AWS_ECR_REGISTRY/$AWS_ECR_REPOSITORY:* -q) || true; \
          echo 'Pulling the new image...'; \
          docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest; \
          echo 'Running backend container...'; \
          docker run -d \
            --name backend \
            --network host \
            --restart unless-stopped \
            --label 'traefik.enable=true' \
            --label 'traefik.http.routers.backend.rule=PathPrefix(\`/\`)' \
            --label 'traefik.http.services.backend.loadbalancer.server.port=$PORT' \
            -e NODE_ENV=$NODE_ENV \
            -e PORT=$PORT \
            -e DB_HOST=$DB_HOST \
            -e DB_PASSWORD=$DB_PASSWORD \
            -e REDIS_PASSWORD=$REDIS_PASSWORD \
            -e SESSION_SECRET=$SESSION_SECRET \
            -e SMTP_HOST=$SMTP_HOST \
            -e SMTP_USER=$SMTP_USER \
            -e SMTP_PASSWORD=$SMTP_PASSWORD \
            -e SMTP_FROM=$SMTP_FROM \
            -e FRONTEND_URL=$FRONTEND_URL \
            -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
            -e AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION \
            -e AWS_S3_BUCKET=$AWS_S3_BUCKET \
            -e AWS_SMS_REGION=$AWS_SMS_REGION \
            $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest; \
          echo 'Running redis container...'; \
          docker run -d \
            --name redis \
            --network host \
            --restart unless-stopped \
            --mount source=redis-data,target=/data \
            -e REDIS_ARGS='--requirepass $REDIS_PASSWORD --save 60 1 --loglevel warning' \
            redis/redis-stack-server; \
          echo 'Running traefik container...'; \
          docker run -d \
            --name traefik \
            --network host \
            --restart unless-stopped \
            -v letsencrypt:/letsencrypt \
            -v /var/run/docker.sock:/var/run/docker.sock \
            traefik:v3.0 \
            --log.level=INFO \
            --providers.docker \
            --providers.docker.exposedbydefault=false \
            --entrypoints.http.address=:80 \
            --entrypoints.https.address=:443 \
            --entrypoints.https.http.tls.certResolver=letsencrypt \
            --entrypoints.https.http.tls.domains[0].main=$CERTIFICATE_DOMAIN \
            --certificatesresolvers.letsencrypt.acme.tlschallenge=true \
            --certificatesresolvers.letsencrypt.acme.email=$CERTIFICATE_EMAIL \
            --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json; \
          echo 'Removing unused images container...'; \
          docker image prune -a -f; \
        "
      - echo "Deployment complete!"

artifacts:
  files:
    - '**/*'
